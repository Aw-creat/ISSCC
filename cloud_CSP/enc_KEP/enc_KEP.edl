enclave {
    from "sgx_tstdc.edl" import *;

    trusted {
        /* define ECALLs here. */
		public void ecall_prepare_query_vector([in,count=keywords_list_size,size=100] const char** keywords_list, size_t keywords_list_size, int k, [user_check] double* query_vector, size_t query_vector_size, [user_check] char* w_time, size_t w_time_len);

		public void foo_on([out,size=len] char* buf,size_t len);
		//public void ecall_prepare_query_vector([in, count=keywords_list_size] const char** keywords_list, size_t keywords_list_size);
		//public void ecall_prepare_query_vector([in, count=keywords_list_size] const char** keywords_list, size_t keywords_list_size, int k, [out] double* query_vector, size_t query_vector_size, [out] char* w_time, size_t w_time_len);
		public sgx_status_t generate_rsa_key_pair_and_export_public_key();
    };

    untrusted {
        /* define OCALLs here. */
		//void ocall_loadIDFValues([in, string] const char* path);
		void ocall_loadIDFValues([in,string] const char* filename, [user_check] char** keys, [in,out, count=count,size=8] double* weights, size_t count, [in,out] size_t* actual_count);
		void ocall_print_string([in, string] const char* str);
		void ocall_print_int(int val);
		void ocall_print_size_t(size_t val);
		void ocall_QueryPerformanceCounter([out] int64_t* start_time);
        void ocall_QueryPerformanceCounter_End([out] int64_t* end_time);
		void ocall_loadDictionary([in,string] const char* filename, [user_check] char** keys, [in,out, count=count,size=4] int* indices, size_t count, [in,out] size_t* actual_count);
		//void ocall_loadDictionary([in,string] const char* filename, [in,out,count=count,size=100] char** keys, [in,out, count=count,size=4] int* indices, size_t count, [in,out] size_t* actual_count);
		//void ocall_loadDictionary([in, string] const char* filename, [out,size=count] char** keys, [out, size=count] int* indices, size_t count, [out] size_t* actual_count);
		//void ocall_loadVectorBool([in, string] const char* filename, [out, size=size] char* data, size_t size, [out] size_t* actual_size);
		void ocall_loadVectorBool([in, string] const char* filename, [user_check] char* data, size_t size, [user_check] size_t* actual_size);
		//void ocall_save_public_key([in, size=key_size] const uint8_t* public_key, size_t key_size);
		//void ocall_save_public_key([in, size=modulus_size] const uint8_t* modulus, size_t modulus_size, uint32_t exponent);
		//void ocall_save_public_key([in, size=n_size] const uint8_t* n, size_t n_size, [in, size=e_size] const uint8_t* e, size_t e_size);
		void ocall_save_public_key([in, size=n_size] const uint8_t* modulus, size_t n_size, [in, size=e_size] const uint8_t* exponent, size_t e_size);
	
    };
};
